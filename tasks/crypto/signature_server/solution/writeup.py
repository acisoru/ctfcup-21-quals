from hashlib import sha1
from random import randint
from ecdsa import SigningKey, SECP160r1
import json
import socket
import binascii
import re

Q = 0x0100000000000000000001f4c8f927aed3ca752257
ORDERLEN = (1 + len("%x" % Q)) // 2


"""
1. Guess that this is implicit hint attack (for example, using "timing ECDSA attacks" search query)
2. Collect a required number of signatures with the smallest ephemeral keys and therefore the timings 
   (for example, we need less than 100 signatures, if ephemeral keys have 5 zero most significant bits)
3. Perform a lattice-based attack  
 
"""

def string_to_number(string):
    return int(binascii.hexlify(string), 16)

def string_to_number_fixedlen(string):
    assert len(string) == ORDERLEN, (len(string), ORDERLEN)
    return int(binascii.hexlify(string), 16)

def number_to_string(num):
    fmt_str = "%0" + str(2 * ORDERLEN) + "x"
    string = binascii.unhexlify((fmt_str % num).encode())
    assert len(string) == ORDERLEN, (len(string), ORDERLEN)
    return string








# Collecting 50 signatures with ephemeral keys having 5 zero most significant bits

m = [randint(0, Q-1) for _ in range(5000)]


sock = socket.socket()
sock.connect(("localhost", 1537))

data = sock.recv(1024)
print(data)




sock.send("2\n")
print(2)

data = sock.recv(1024)
print(data)

mess = json.dumps(m)
print(len(mess))

for i in range(0, len(mess), 1000):
    block = mess[i: i + 1000]
    print("sending_block:", block)
    sock.send("'%s'\n" % block)
    print(sock.recv(100000))


s = ""
while (True):
    s_ = sock.recv(100000)
    print(ord(s_[-1]))
    s += s_
    print("block recieved")
    if "}" in s_:
        break
sock.close()


s = s[:s.find("}") + 1]
s = s.replace("\n", "")
s = s.replace("\r", "")
print(s)


d = json.loads(s)
print(d)





samples = []

for i in range(len(m)):
    samples.append([d["t"][i], m[i], d["r"][i], d["s"][i]])
samples.sort()

s = [samples[i][3] for i in range(50)]
m = [string_to_number(sha1(number_to_string(samples[i][1])).digest()) for i in range(50)]
r = [samples[i][2] for i in range(50)]
t = [samples[i][0] for i in range(50)]


print("s = " + str(s))
print("r = " + str(r))
print("m = " + str(m))

# m = [1367173468911606225005327641125749749534975463449L, 254234264456529115779528466111680951016980059304L, 912969297182402804367619997656599833044923978904L, 1163756168912721058453255457640635617511777570365L, 1222752594506751156775019646689081541350923299200L, 836256887516295010594176298737631637134995907745L, 940206758598625026951544311566774758781230117097L, 779168511578063870324536658879405919420261577620L, 549358302554783376867965937264551608107936024909L, 285961455446804281689066792326194511729610562850L, 1093864038959273262663492354311790820094089866586L, 1142694899445224644945437288321824073751780170721L, 35339444425598083605047298274287021563534149276L, 1346896810200467559160509465764173191098199931444L, 1196113485481480741860282253356250442034468840928L, 740589644543243409076584077679317859471911065578L, 744267895661031355877639509640056878313083080868L, 1160759439833639455184350831106017017979167487268L, 587291464141101912088641494062144467186803218995L, 125954035790080089700556533723399950043599430550L, 1211060486027812888706565411277199056169390146998L, 1119773599297111555884996661835991906197759054778L, 1096160687044340269705031260896014347326491666541L, 1187132597698931895806948857781983379689831963142L, 971711969245472517711942478603278397340863792260L, 698369606284248913155566990304421137550026156066L, 670596885223650498766547002500724269086541211463L, 40277778139400227003794610544845615865191093422L, 682040233190921709657640811244362294667805337660L, 606732078018835425448848886025604382482419236093L, 322866019447485387327111036255564953366897564865L, 937839267815315690190851026849745471866912809643L, 218870441807538288463712901985657359668513855293L, 602280653829280450220646537797794974224183536228L, 1102937925909650759932390617426771262893969535493L, 465851704872582928842715881467946313564194163269L, 855794800908873477945091248858200021059007799436L, 525046087438145291579693231182577302352612574542L, 1437968479813509992256831430756139972274411458613L, 1111871165179229089428746152246504255518709340387L, 133590226028954985403135560623248622112717112027L, 662279658052104815720216928711117548310118798251L, 1229473512386101345674720452229930475188709345128L, 335951310838084983440489945732298237014822380219L, 13019289699647986071400461200854682428101798022L, 238727389671548727324215474319084386191360215516L, 1373442662796466842610770018980897953824854156224L, 546867390377100409011176068592513213304208539493L, 1313927466421422684961635421893936113722754016749L, 1294034108117933759907545301090593493497806746759L]
# r = [1326714085663716820398519175001891682347020127804L, 1090153010694398522337158346912079497078447285893L, 181578862229359770070589564779086930046141035625L, 1211808591192231864259902557075120529972963356221L, 611533920342022323541781128453780214309873180719L, 67106452021041200244061013.6512680120734041241961L, 1379999105079666835215320960230610997805679722523L, 799624896884878421548149273207528849408650280882L, 607606221240641911143310789925049907819547595558L, 609483521390460399132118798780945959426011765655L, 242597610128571495947488643426684382427971690202L, 386098977867118796937621392230802112644156946047L, 1235647247577764888108956065578482790755181064864L, 326641255306725801620581752869429684065165553495L, 497607990591934864672671756483796264665869235669L, 559854228067615380811914165825795186358152849095L, 519314425376274238132727087717715237496801935094L, 636382534902789428523711186976962954415138446933L, 1159574148409701889691682622432176654209140325358L, 69424393777823701081505705631593861793303916769L, 869131082178185771607617659179559438783184676338L, 20042701915666924261827553450251549075205910455L, 1128238461516431700096364620702088153800897273397L, 99359768902575908363751997280255234757267355450L, 316416106628353262478284397178460337902326110964L, 1325982522068000617086752637913746010865808649688L, 329055479163508800798303608663377568256704585269L, 651015257850487737934233484991037668221671134927L, 399848024016924125576103336813256755892542216076L, 1273436541900640522062352653705017190025614674295L, 290076213942735132647091365250300177591679751517L, 639358066597599134263007677735424111400058475645L, 773519635743735711293181513869442017267167475884L, 658724746299936081860761226357989895839270443819L, 319246498603788320097701577320807948381394989480L, 175387808189370544866641380385368053472282494093L, 834854601808436713447857470891226120388784573508L, 208795138141800273773123536665012996710688277148L, 317352346436163294784016420848424393877117323378L, 772258689454766982159264483597014386778398689711L, 806578235303521973047999071636809393859910629925L, 176013441831483348216218204475430280313917518554L, 454952822998935234081523200410770768143346469561L, 836643636762477269604720721778449802804236331102L, 155181304780255722107755446242097114701117666177L, 1445471640067706338670546003483609390831015060816L, 1068118369409082895038364467699755988398817971203L, 111253430188498994145742796484925779245394725647L, 1004526508465147547920107881500680468131776079124L, 1234234174414836550338008910977974305661755860674L]
# s = [1007334066471398910484840279599079900247077317078L, 492554065584196071391437233123540223199629580092L, 560635800586315297895377593545865187492825566795L, 132934858029268789972759905753528458045493740916L, 42658642970075531330651109678000662267723968596L, 930056330999993949962761241205760049133447061376L, 283573904191915737536102305692524926640333175592L, 1259108650949897139836884850137392214524094368630L, 1254146532664236884528451737418676468386175356931L, 1099607143617188175149732980969479768214198405843L, 379959220783023062874011662724206736415557995161L, 797053654166896800448082527297255243807018687945L, 702256626917360274337200085001823990868302672245L, 453448544084613676537975697602540900619570199131L, 475724614811885445844711876541377457460053061206L, 1227490229912286540741677548274004055980733270473L, 827158393630191163759943082528912998915704239435L, 1049479849117750925165788439396694491659509986172L, 454389267952323362772040451344644088580349731780L, 1350528304677432679788268347505323676109912430477L, 795409075669359307607787683968844087258802547503L, 83012868886367428601184228798308091211627800678L, 448148993956363118423221461732644712246269863867L, 1072321487026035501222301827154528833343558137016L, 444636544635904707372356193182563782679835251338L, 890635651882301282204845449470564898535060780425L, 1059924269973523045499220974290340287135976263527L, 308917690027581799285689421483332784633143065888L, 612925738529230019382147811470447294517139032485L, 1228829069698566780479161241979415335873241500467L, 800066488498302479029343361292915688128886056196L, 136361009783702269602256175808946089614489544618L, 817470492440967130601008819803746891647611435334L, 360807913975823761421411835943054521064673190417L, 1217171487863182035777025529705402709379898932641L, 264725638512590853532829135918227455327190738031L, 1303459162192538376902535842118188410194379293445L, 719765514294894710829973124280360356121454210410L, 148834862285687946805619296039594527230837649926L, 892489722267892021957695054898205349634009416308L, 547025427413968715856951577159080707859328346079L, 260142788218416742126700399659671835253213971841L, 1450597407616370316041996953102076691923199917577L, 777678160872472953330929469640255856106480696445L, 1387817352084379257905993274349239773450170608728L, 712433098744761471282119275264147855616373718096L, 141816347754794218482192618086364166023160245317L, 449378268526153849463385017297846780435118908369L, 1327185206108445801573164349859288883466356632306L, 762490441315688205052324556464355694649692067762L]


'''
Lattice attack (sage code):


import time
import hashlib


def attack(m, r, s, q, tMSB):
    
    def CVP(B, t):
        n = B.nrows()
        b = t
        G, M = B.gram_schmidt()
        for j in range(n,0,-1):
            c = ((b * G[j - 1]) / (G[j - 1] * G[j - 1])).round()
            b = b - c * B[j - 1]
        return t - b
    
    delta = len(q.bits()) - tMSB
    n = len(r) 
    
    alpha = [0] + [((m[i] / s[i] - m[0] / s[0])) % q for i in range(1, n)]
    beta = [1] + [((-r[i] / s[i] + r[0] / s[0])) % q for i in range(1, n)]
    
    L = matrix.diagonal([1] + [q for i in range(1, n)])
    L[0] = beta
    L = matrix(ZZ, n, L.rows(), sparse=False)
    for i in range(0, n):
        for j in range(1, n):
            L[i, j] *= 2^(delta)
            
    L = L.LLL()
    u = 2^(delta) * vector(ZZ, alpha)
    return (CVP(L, u)[0]) % q




q = 0x0100000000000000000001f4c8f927aed3ca752257
 
tMSB = 5
m = [1367173468911606225005327641125749749534975463449L, 254234264456529115779528466111680951016980059304L, 912969297182402804367619997656599833044923978904L, 1163756168912721058453255457640635617511777570365L, 1222752594506751156775019646689081541350923299200L, 836256887516295010594176298737631637134995907745L, 940206758598625026951544311566774758781230117097L, 779168511578063870324536658879405919420261577620L, 549358302554783376867965937264551608107936024909L, 285961455446804281689066792326194511729610562850L, 1093864038959273262663492354311790820094089866586L, 1142694899445224644945437288321824073751780170721L, 35339444425598083605047298274287021563534149276L, 1346896810200467559160509465764173191098199931444L, 1196113485481480741860282253356250442034468840928L, 740589644543243409076584077679317859471911065578L, 744267895661031355877639509640056878313083080868L, 1160759439833639455184350831106017017979167487268L, 587291464141101912088641494062144467186803218995L, 125954035790080089700556533723399950043599430550L, 1211060486027812888706565411277199056169390146998L, 1119773599297111555884996661835991906197759054778L, 1096160687044340269705031260896014347326491666541L, 1187132597698931895806948857781983379689831963142L, 971711969245472517711942478603278397340863792260L, 698369606284248913155566990304421137550026156066L, 670596885223650498766547002500724269086541211463L, 40277778139400227003794610544845615865191093422L, 682040233190921709657640811244362294667805337660L, 606732078018835425448848886025604382482419236093L, 322866019447485387327111036255564953366897564865L, 937839267815315690190851026849745471866912809643L, 218870441807538288463712901985657359668513855293L, 602280653829280450220646537797794974224183536228L, 1102937925909650759932390617426771262893969535493L, 465851704872582928842715881467946313564194163269L, 855794800908873477945091248858200021059007799436L, 525046087438145291579693231182577302352612574542L, 1437968479813509992256831430756139972274411458613L, 1111871165179229089428746152246504255518709340387L, 133590226028954985403135560623248622112717112027L, 662279658052104815720216928711117548310118798251L, 1229473512386101345674720452229930475188709345128L, 335951310838084983440489945732298237014822380219L, 13019289699647986071400461200854682428101798022L, 238727389671548727324215474319084386191360215516L, 1373442662796466842610770018980897953824854156224L, 546867390377100409011176068592513213304208539493L, 1313927466421422684961635421893936113722754016749L, 1294034108117933759907545301090593493497806746759L]
r = [1326714085663716820398519175001891682347020127804L, 1090153010694398522337158346912079497078447285893L, 181578862229359770070589564779086930046141035625L, 1211808591192231864259902557075120529972963356221L, 611533920342022323541781128453780214309873180719L, 671064520210412002440610136512680120734041241961L, 1379999105079666835215320960230610997805679722523L, 799624896884878421548149273207528849408650280882L, 607606221240641911143310789925049907819547595558L, 609483521390460399132118798780945959426011765655L, 242597610128571495947488643426684382427971690202L, 386098977867118796937621392230802112644156946047L, 1235647247577764888108956065578482790755181064864L, 326641255306725801620581752869429684065165553495L, 497607990591934864672671756483796264665869235669L, 559854228067615380811914165825795186358152849095L, 519314425376274238132727087717715237496801935094L, 636382534902789428523711186976962954415138446933L, 1159574148409701889691682622432176654209140325358L, 69424393777823701081505705631593861793303916769L, 869131082178185771607617659179559438783184676338L, 20042701915666924261827553450251549075205910455L, 1128238461516431700096364620702088153800897273397L, 99359768902575908363751997280255234757267355450L, 316416106628353262478284397178460337902326110964L, 1325982522068000617086752637913746010865808649688L, 329055479163508800798303608663377568256704585269L, 651015257850487737934233484991037668221671134927L, 399848024016924125576103336813256755892542216076L, 1273436541900640522062352653705017190025614674295L, 290076213942735132647091365250300177591679751517L, 639358066597599134263007677735424111400058475645L, 773519635743735711293181513869442017267167475884L, 658724746299936081860761226357989895839270443819L, 319246498603788320097701577320807948381394989480L, 175387808189370544866641380385368053472282494093L, 834854601808436713447857470891226120388784573508L, 208795138141800273773123536665012996710688277148L, 317352346436163294784016420848424393877117323378L, 772258689454766982159264483597014386778398689711L, 806578235303521973047999071636809393859910629925L, 176013441831483348216218204475430280313917518554L, 454952822998935234081523200410770768143346469561L, 836643636762477269604720721778449802804236331102L, 155181304780255722107755446242097114701117666177L, 1445471640067706338670546003483609390831015060816L, 1068118369409082895038364467699755988398817971203L, 111253430188498994145742796484925779245394725647L, 1004526508465147547920107881500680468131776079124L, 1234234174414836550338008910977974305661755860674L]
s = [1007334066471398910484840279599079900247077317078L, 492554065584196071391437233123540223199629580092L, 560635800586315297895377593545865187492825566795L, 132934858029268789972759905753528458045493740916L, 42658642970075531330651109678000662267723968596L, 930056330999993949962761241205760049133447061376L, 283573904191915737536102305692524926640333175592L, 1259108650949897139836884850137392214524094368630L, 1254146532664236884528451737418676468386175356931L, 1099607143617188175149732980969479768214198405843L, 379959220783023062874011662724206736415557995161L, 797053654166896800448082527297255243807018687945L, 702256626917360274337200085001823990868302672245L, 453448544084613676537975697602540900619570199131L, 475724614811885445844711876541377457460053061206L, 1227490229912286540741677548274004055980733270473L, 827158393630191163759943082528912998915704239435L, 1049479849117750925165788439396694491659509986172L, 454389267952323362772040451344644088580349731780L, 1350528304677432679788268347505323676109912430477L, 795409075669359307607787683968844087258802547503L, 83012868886367428601184228798308091211627800678L, 448148993956363118423221461732644712246269863867L, 1072321487026035501222301827154528833343558137016L, 444636544635904707372356193182563782679835251338L, 890635651882301282204845449470564898535060780425L, 1059924269973523045499220974290340287135976263527L, 308917690027581799285689421483332784633143065888L, 612925738529230019382147811470447294517139032485L, 1228829069698566780479161241979415335873241500467L, 800066488498302479029343361292915688128886056196L, 136361009783702269602256175808946089614489544618L, 817470492440967130601008819803746891647611435334L, 360807913975823761421411835943054521064673190417L, 1217171487863182035777025529705402709379898932641L, 264725638512590853532829135918227455327190738031L, 1303459162192538376902535842118188410194379293445L, 719765514294894710829973124280360356121454210410L, 148834862285687946805619296039594527230837649926L, 892489722267892021957695054898205349634009416308L, 547025427413968715856951577159080707859328346079L, 260142788218416742126700399659671835253213971841L, 1450597407616370316041996953102076691923199917577L, 777678160872472953330929469640255856106480696445L, 1387817352084379257905993274349239773450170608728L, 712433098744761471282119275264147855616373718096L, 141816347754794218482192618086364166023160245317L, 449378268526153849463385017297846780435118908369L, 1327185206108445801573164349859288883466356632306L, 762490441315688205052324556464355694649692067762L]
m_ = [IntegerModRing(q)(i) for i in m]
r_ = [IntegerModRing(q)(i) for i in r]
s_ = [IntegerModRing(q)(i) for i in s]

result = attack(m_, r_, s_, q, tMSB)
print(result)
print(q-result)

# 16682924193151889152234138634955127000358809511
# 1444818713137751029051453058971871652884284682928

'''

# Check:

a = 16682924193151889152234138634955127000358809511



sock = socket.socket()
sock.connect(("localhost", 1537))

data = sock.recv(1024)
print(data)


sock.send("3\n")
m = sock.recv(1000)
print(m)
m = int(re.findall('[0-9]+', m)[0])
print(m)

sk = SigningKey.from_string(number_to_string(a), curve=SECP160r1)


s = (sk.sign(number_to_string(m)).encode("hex"))
sock.send("'%s'\n" %s)
print(sock.recv(1024))
sock.close()
